#!/bin/bash
###############################################
##
##  Copyright (2019, ) Institute of Software
##      Chinese Academy of Sciences
##          wuheng@otcaixiscas.ac.cn
##         wuyuewen@otcaix.iscas.ac.cn
##              2019-11-4
##
###############################################

export LD_LIBRARY_PATH="/usr/lib64"

MASTER=$(cat /etc/ovn-emulator.conf | grep master | awk -F"=" '{print$2}')
THISIP=$(cat /etc/ovn-emulator.conf | grep thisip | awk -F"=" '{print$2}')
VERSION="1.5.0"
IFCFG="/etc/sysconfig/network-scripts/"

NB_PORT="6641"
SB_PORT="6642"

NB_CMD="ovn-nbctl --db=tcp:$MASTER:$NB_PORT"
SB_CMD="ovn-sbctl --db=tcp:$MASTER:$SB_PORT"

###########################################################
##
##  init env
##
##########################################################

function start-central()
{
  
  start-worker

  systemctl start   ovn-ovsdb
  systemctl enable  ovn-ovsdb
  systemctl start   ovn-northd
  systemctl enable  ovn-northd
  systemctl start   ovn-controller
  systemctl enable  ovn-controller

  sudo ovs-vsctl set open . external-ids:ovn-bridge=br-int
  sudo ovs-vsctl set open . external-ids:ovn-remote=unix:/usr/var/run/openvswitch/ovnsb_db.sock
  sudo ovs-vsctl set open . external-ids:ovn-encap-ip=127.0.0.1
  #sudo ovs-vsctl set open . external-ids:ovn-encap-type=geneve,vxlan
  sudo ovs-vsctl set open . external-ids:ovn-encap-type=geneve
}

function stop-central()
{
  stop-worker

  systemctl stop    ovn-ovsdb
  systemctl disable ovn-ovsdb
  systemctl stop    ovn-northd
  systemctl disable ovn-northd
}

function start-worker()
{

  systemctl start   openvswitch
  systemctl enable  openvswitch
  systemctl start   ovn-controller
  systemctl enable  ovn-controller

  sudo ovs-vsctl set open . external-ids:ovn-bridge=br-int
  #sudo ovs-vsctl set open . external-ids:ovn-encap-type=geneve,vxlan
  sudo ovs-vsctl set open . external-ids:ovn-encap-type=geneve
  sudo ovs-vsctl set open . external-ids:ovn-remote=tcp:$MASTER:6642
  sudo ovs-vsctl set open . external-ids:ovn-encap-ip=$THISIP 
  sudo ovs-vsctl set open . external-ids:ovn-nb="tcp:$MASTER:6641" 
}

function stop-worker()
{
  systemctl stop    ovn-controller
  systemctl disable ovn-controller
}

function init-network()
{
  nic=$(echo $* | awk -F"--nic" '{print$2}' | awk '{print$1}')
  
  if [[ -z $nic ]]
  then
    cmddesc
    echo -e "--nic   \tnic name" >&2
    exit 1
  fi
   
  create-bridge --name br-ex --nic $nic   
}

function init-netconfig-ifneed()
{
  if [[ ! -f $IFCFG"ifcfg-BRX" ]]
  then
     echo DEVICE=BRX           >> /etc/sysconfig/network-scripts/ifcfg-BRX
     echo DEVICETYPE=ovs       >> /etc/sysconfig/network-scripts/ifcfg-BRX
     echo TYPE=OVSBridge       >> /etc/sysconfig/network-scripts/ifcfg-BRX
     echo ONBOOT=yes           >> /etc/sysconfig/network-scripts/ifcfg-BRX
  fi

  if [[ ! -f $IFCFG"ifcfg-ORG" ]]
  then
     echo TYPE=OVSPort         >> /etc/sysconfig/network-scripts/ifcfg-ORG
     echo DEVICE=ORG           >> /etc/sysconfig/network-scripts/ifcfg-ORG
     echo ONBOOT=yes           >> /etc/sysconfig/network-scripts/ifcfg-ORG
     echo DEVICETYPE=ovs       >> /etc/sysconfig/network-scripts/ifcfg-ORG
     echo OVS_BRIDGE=BRX       >> /etc/sysconfig/network-scripts/ifcfg-ORG
  fi
}

function generate-netconfig()
{
  name=$1
  nic=$2

  if [[ ! -f $IFCFG"ifcfg-$nic.bak" ]]
  then
    cp $IFCFG"ifcfg-$nic" $IFCFG"ifcfg-$nic.bak"
  fi

  mv -f $IFCFG"ifcfg-ORG" $IFCFG"ifcfg-$nic"
  mv -f $IFCFG"ifcfg-BRX" $IFCFG"ifcfg-$name"

  static=$(cat $IFCFG"ifcfg-$nic.bak" | grep BOOTPROTO | grep static)
  ip=$(cat $IFCFG"ifcfg-$nic.bak" | grep IPADDR)
  mask=$(cat $IFCFG"ifcfg-$nic.bak" | grep NETMASK)
  prefix=$(cat $IFCFG"ifcfg-$nic.bak" |  grep PREFIX)
  gw=$(cat $IFCFG"ifcfg-$nic.bak" | grep GATEWAY)
  dns=$(cat $IFCFG"ifcfg-$nic.bak" | grep DNS)
  ipv6i=$(cat $IFCFG"ifcfg-$nic.bak" | grep IPV6INIT)
  ipv6c=$(cat $IFCFG"ifcfg-$nic.bak" | grep IPV6_AUTOCONF)
  ipv6d=$(cat $IFCFG"ifcfg-$nic.bak" | grep IPV6_DEFROUTE)
  ipv6a=$(cat $IFCFG"ifcfg-$nic.bak" | grep IPV6ADDR)
  
  sed -i "s/BRX/$name/g" $IFCFG"ifcfg-$name"
  sed -i "s/BRX/$name/g" $IFCFG"ifcfg-$nic"
  sed -i "s/ORG/$nic/g" $IFCFG"ifcfg-$nic"
  
  
  if [[ -z $static ]]
  then
    echo "BOOTPROTO=dhcp" >> $IFCFG"ifcfg-$name"
  else
    echo $ip >> $IFCFG"ifcfg-$name"
    echo $mask >> $IFCFG"ifcfg-$name"
    echo $prefix >> $IFCFG"ifcfg-$name"
    echo $gw >> $IFCFG"ifcfg-$name"
    echo $ipv6a >> $IFCFG"ifcfg-$name"
    echo $ipv6c >> $IFCFG"ifcfg-$name"
    echo $ipv6d >> $IFCFG"ifcfg-$name"
    echo $ipv6i >> $IFCFG"ifcfg-$name"
    echo $dns >> $IFCFG"ifcfg-$name"
  fi
}

###########################################################
##
##  L2 bridge
##
##########################################################


function checkOVSStatus()
{
  res=$(systemctl status openvswitch | grep Active | awk -F":" '{print $2}' | awk '{print$1}')
  if [[ $res != "active" ]]
  then
    echo "please start openvswitch first" >&2
    exit 1
  fi
}

function checkNICConfig()
{
  nic=$1
  if [[ ! -f $IFCFG"ifcfg-$nic" ]]
  then
    echo "wrong NIC name" >&2
    exit 1
  fi  
}

function checkDuplicate()
{
  name=$1
  sid=$($NB_CMD ls-list | grep "($name)" | awk '{print$1}')
  if [[ -n $sid ]]
  then
    echo "cannot connect the master or the switch name exists" >&2
    exit 1
  fi
}

function checkDHCP()
{
  dhcpid=$1
  if [[ -z $dhcpid ]]
  then 
    echo -e "invalid switch name"  >&2
	exit 1
  fi
}

function create-bridge()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  nic=$(echo $* | awk -F"--nic" '{print$2}' | awk '{print$1}')
  vlan=$(echo $* | awk -F"--vlan" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $name || -z $nic || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name  \tbridge name" >&2
    echo -e "--nic   \tnic name" >&2
    echo -e "--vlan  \tvlan id, default is \"vlan=0\"" >&2
    exit 1
  fi
  
  ## check
  checkOVSStatus
  checkNICConfig $nic
  
  ## init
  init-netconfig-ifneed
  
  ## generate
  generate-netconfig $name $nic

  ## create and config
  
  if [[ -z $vlan ]]
  then
    vlan=0
  fi
  
  ovs-vsctl --if-exist del-br $name
  ovs-vsctl add-br $name
  ovs-vsctl add-br $name"-"$vlan $name $vlan
  ovs-vsctl set interface $name"-"$vlan type=internal
  ovs-vsctl add-port $name $nic && ifdown $nic && ifup $nic && ifup $name
  
  ip link set dev $nic promisc on
  ip link set dev $name promisc on
}

function delete-bridge()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  nic=$(echo $* | awk -F"--nic" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $nic || -z $nic || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name  \tbridge name" >&2
    echo -e "--nic   \tnic name" >&2
    exit 1
  fi

  ## check
  
  checkOVSStatus
  checkNICConfig $nic
  
  if [[ ! -f $IFCFG"ifcfg-$nic.bak" ]]
  then
    echo "$nic is not a part of openvswitch" >&2
    exit 1
  fi

  ## revert and delete
  rm -rf $IFCFG"ifcfg-$name" 
  rm -rf $IFCFG"ifcfg-$nic"
  mv -f $IFCFG"ifcfg-$nic.bak" $IFCFG"ifcfg-$nic"

  ovs-vsctl --if-exist del-br $name && ifdown $nic && ifup $nic

}

# Set vlan id for port

function setbridge-vlan()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  vlan=$(echo $* | awk -F"--vlan" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $name || -z $vlan || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name     \tbridge name" >&2
    echo -e "--vlan     \tvlan id" >&2
    exit 1
  fi


  ovs-vsctl add-br $name"-"$vlan $name $vlan
  ovs-vsctl set interface $name"-"$vlan type=internal  
}

# Delete port's vlan id

function delbridge-vlan()
{

  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  vlan=$(echo $* | awk -F"--vlan" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $name || -z $vlan || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name    \tbridge name" >&2
    echo -e "--vlan    \tvlan" >&2
    exit 1
  fi

  res=$(ovs-vsctl br-to-parent $name"-"$vlan)

  if [[ $res != $name ]]
  then
    echo "wrong vlan id in bridge $name" >&2
    exit 1
  fi

  ovs-vsctl --if-exist del-br $name"-"$vlan
}

###########################################################
##
##  L3 switch
##
##########################################################

## Just Switch

function just-switch()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  subn=$(echo $* | awk -F"--subnet" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $name || -z $subn || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name  \tswitch name" >&2
    echo -e "--subnet\tIP range. for example, 192.168.1.0/24"  >&2
    exit 1
  fi

  sid=$($NB_CMD ls-list | grep "($name)" | awk '{print$1}')
  if [[ -n $sid ]]
  then
    echo "cannot connect the master or the switch name exists" >&2
    exit 1
  fi
  
  router='r4'$name
  rport='rp4'$name
  rmac=$(printf '00:60:2F:%02X:%02X:%02X\n' $[RANDOM%256] $[RANDOM%256] $[RANDOM%256])
  rip=$(echo $subn | awk -F"." '{print$1"."$2"."$3}')".1"
  rmk=$(echo $subn | awk -F"/" '{print$2}')
  $NB_CMD lr-add $router
  $NB_CMD lrp-add $router $rport $rmac $rip"/"$rmk
  
  sport='sp4'$name
  $NB_CMD ls-add $name
  $NB_CMD set Logical_Switch $name other_config:subnet=$subn
  $NB_CMD lsp-add $name $sport
  $NB_CMD lsp-set-type $sport router
  $NB_CMD lsp-set-addresses $sport $rmac
  $NB_CMD lsp-set-options $sport router-port=$rport

  #dmac=$(printf '00:60:2F:%02X:%02X:%02X\n' $[RANDOM%256] $[RANDOM%256] $[RANDOM%256])
  #dip=$(echo $subn | awk -F"." '{print$1"."$2"."$3}')".128" 
  did=$($NB_CMD create DHCP_Options cidr=${subn//:/\\:} options="\"server_id\"=\"$rip\" \"server_mac\"=\"$rmac\" \"lease_time\"=\"3600\" \"router\"=\"$rip\"")
  $NB_CMD lsp-add $name "dhcpv4id-$name-"$did
}


## Create a switch with a default DHCP

function create-switch()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  subn=$(echo $* | awk -F"--subnet" '{print$2}' | awk '{print$1}')
  bridge=$(echo $* | awk -F"--bridge" '{print$2}' | awk '{print$1}')
  vlanId=$(echo $* | awk -F"--vlanId" '{print$2}' | awk '{print$1}')
  gway=$(echo $* | awk -F"--gateway" '{print$2}' | awk '{print$1}')
  dhcp=$(echo $* | awk -F"--dhcp" '{print$2}' | awk '{print$1}')
  imtu=$(echo $* | awk -F"--mtu" '{print$2}' | awk '{print$1}')
  excl=$(echo $* | awk -F"--excludeIPs" '{print$2}' | awk '{print$1}')
  dnss=$(echo $* | awk -F"--dnsServer" '{print$2}' | awk '{print$1}')
  ipv6=$(echo $* | awk -F"--ipv6" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $name || -z $subn || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name       \tswitch name" >&2
    echo -e "--subnet     \tIP range. for example, 192.168.1.0/24"  >&2
    echo -e "--gateway    \tgateway.  for example, 192.168.1.1"  >&2
    echo -e "--dhcp       \tdhcp"  >&2
    echo -e "--mtu        \toptinal, mtu.  for example, 1480"  >&2
    echo -e "--bridge     \toptinal,bridge"  >&2
    echo -e "--vlanId     \toptinal,vlanId"  >&2
    echo -e "--excludeIPs \toptinal, excludeIPs.  192.168.1.1,192.168.1.10..192.168.1.100"  >&2
    echo -e "--dnsServer  \toptinal, dnsServer.  192.168.1.1"  >&2
    echo -e "--ipv6       \toptinal, true or false"  >&2
    exit 1
  fi

  sid=$($NB_CMD ls-list | grep "($name)" | awk '{print$1}')
  if [[ -n $sid ]]
  then
    echo "cannot connect the master or the switch name exists" >&2
    exit 1
  fi
 
  $NB_CMD ls-add $name

  if [[ -n $excl ]]
  then
    nexcl=$(echo ${excl//,/ })
    $NB_CMD set Logical_Switch $name other_config:exclude_ips="$nexcl"
  fi
 
  if [[ -n $subn ]]
  then
  
    mtu="1500"
    if [[ -n $imtu ]]
    then
      mtu=$imtu
    fi
 
    if [[ -n $dhcp ]]
    then
      router=$name"-router"
      rport=$name"-router-port"
      
      rmac=$(printf '00:60:2F:%02X:%02X:%02X\n' $[RANDOM%256] $[RANDOM%256] $[RANDOM%256])
 
      $NB_CMD lr-add $router
      $NB_CMD set Logical_router $router options:chassis=$($SB_CMD show | grep -B 3 "$THISIP" | grep Chassis | awk -F"\"" '{print$2}')
	  
      rmk=$(echo $subn | awk -F"/" '{print$2}')
      $NB_CMD lrp-add $router $rport $rmac $dhcp"/"$rmk
  
      mport="mapping-to-"$router
      $NB_CMD lsp-add $name $mport
      $NB_CMD lsp-set-type $mport router
      $NB_CMD lsp-set-addresses $mport $rmac
      $NB_CMD lsp-set-options $mport router-port=$rport
       
      if [[ -n $bridge ]]
      then 
        sport='to-'$rport'-'$(hostname)'-localnet'
        $NB_CMD lsp-add $name $sport
        $NB_CMD lsp-set-addresses $sport unknown
        $NB_CMD lsp-set-type $sport localnet
        pswn=${rmac//:/}"-"$sport
      
        $NB_CMD lsp-set-options $sport network_name=$pswn
 
        eids=$(ovs-vsctl list Open_vSwitch | grep external_ids | awk -F"ovn-bridge-mappings=\"" '{print$2}' | awk -F"\"" '{print$1}')
   
        if [[ -n $vlanId ]]
        then
          $NB_CMD set Logical_Switch_Port $sport tag=$vlanId
        fi

        if [[ -z $eids ]] 
        then
          ovs-vsctl set Open_vSwitch . external-ids:ovn-bridge-mappings=$pswn:$bridge
        else
          ovs-vsctl set Open_vSwitch . external-ids:ovn-bridge-mappings=$pswn:$bridge,$eids
        fi
      fi

      if [[ -z $dnss ]]
      then
        did=$($NB_CMD create DHCP_Options cidr=${subn//:/\\:} options="\"server_id\"=\"$dhcp\" \"server_mac\"=\"$rmac\" \"lease_time\"=\"3600\" \"router\"=\"$gway\" \"mtu\"=\"$mtu\"")
      else
        did=$($NB_CMD create DHCP_Options cidr=${subn//:/\\:} options="\"server_id\"=\"$dhcp\" \"server_mac\"=\"$rmac\" \"lease_time\"=\"3600\" \"router\"=\"$gway\" \"mtu\"=\"$mtu\" \"dns_server\"=\"$dnss\"")
      fi
      
      if [[ $ipv6 == "true" ]]
      then
        $NB_CMD lsp-add $name "dhcpv6id-$name-"$did
      else
        $NB_CMD lsp-add $name "dhcpv4id-$name-"$did
      fi
      
      fi
  fi

}

function create-switch6()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  subn=$(echo $* | awk -F"--subnet" '{print$2}' | awk '{print$1}')
  bridge=$(echo $* | awk -F"--bridge" '{print$2}' | awk '{print$1}')
  vlanId=$(echo $* | awk -F"--vlanId" '{print$2}' | awk '{print$1}')
  gway=$(echo $* | awk -F"--gateway" '{print$2}' | awk '{print$1}')
  dhcp=$(echo $* | awk -F"--dhcp" '{print$2}' | awk '{print$1}')
  imtu=$(echo $* | awk -F"--mtu" '{print$2}' | awk '{print$1}')
  excl=$(echo $* | awk -F"--excludeIPs" '{print$2}' | awk '{print$1}')
  dnss=$(echo $* | awk -F"--dnsServer" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $name || -z $subn || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name       \tswitch name" >&2
    echo -e "--subnet     \tIP range. for example, 192.168.1.0/24"  >&2
    echo -e "--gateway    \tgateway.  for example, 192.168.1.1"  >&2
    echo -e "--dhcp       \tdhcp"  >&2
    echo -e "--mtu        \toptinal, mtu.  for example, 1480"  >&2
    echo -e "--bridge     \toptinal,bridge"  >&2
    echo -e "--vlanId     \toptinal,vlanId"  >&2
    echo -e "--excludeIPs \toptinal, excludeIPs.  192.168.1.1,192.168.1.10..192.168.1.100"  >&2
    echo -e "--dnsServer  \toptinal, dnsServer.  192.168.1.1"  >&2
    exit 1
  fi

  sid=$($NB_CMD ls-list | grep "($name)" | awk '{print$1}')
  if [[ -n $sid ]]
  then
    echo "cannot connect the master or the switch name exists" >&2
    exit 1
  fi
 
  $NB_CMD ls-add $name

  if [[ -n $excl ]]
  then
    nexcl=$(echo ${excl//,/ })
    $NB_CMD set Logical_Switch $name other_config:exclude_ips="$nexcl"
  fi
 
  if [[ -n $subn ]]
  then
  
    mtu="1500"
    if [[ -n $imtu ]]
    then
      mtu=$imtu
    fi
 
    if [[ -n $dhcp ]]
    then
      router=$name"-router"
      rport=$name"-router-port"
      rmac=$(printf '00:60:2F:%02X:%02X:%02X\n' $[RANDOM%256] $[RANDOM%256] $[RANDOM%256])
 
      $NB_CMD lr-add $router
      $NB_CMD set Logical_router $router options:chassis=$($SB_CMD show | grep -B 3 "$THISIP" | grep Chassis | awk -F"\"" '{print$2}')
	  
      rmk=$(echo $subn | awk -F"/" '{print$2}')
      $NB_CMD lrp-add $router $rport $rmac $dhcp"/"$rmk
  
      mport="mapping-to-"$router
      $NB_CMD lsp-add $name $mport
      $NB_CMD lsp-set-type $mport router
      $NB_CMD lsp-set-addresses $mport $rmac
      $NB_CMD lsp-set-options $mport router-port=$rport
       
      if [[ -n $bridge ]]
      then 
        sport='to-'$rport'-'$(hostname)'-localnet'
        $NB_CMD lsp-add $name $sport
        $NB_CMD lsp-set-addresses $sport unknown
        $NB_CMD lsp-set-type $sport localnet
        pswn=${rmac//:/}"-"$sport
      
        $NB_CMD lsp-set-options $sport network_name=$pswn
 
        eids=$(ovs-vsctl list Open_vSwitch | grep external_ids | awk -F"ovn-bridge-mappings=\"" '{print$2}' | awk -F"\"" '{print$1}')
   
        if [[ -n $vlanId ]]
        then
          $NB_CMD set Logical_Switch_Port $sport tag=$vlanId
        fi

        if [[ -z $eids ]] 
        then
          ovs-vsctl set Open_vSwitch . external-ids:ovn-bridge-mappings=$pswn:$bridge
        else
          ovs-vsctl set Open_vSwitch . external-ids:ovn-bridge-mappings=$pswn:$bridge,$eids
        fi
      fi

      if [[ -z $dnss ]]
      then
        did=$($NB_CMD create DHCP_Options cidr=$subn options="\"server_id\"=\"$dhcp\" \"server_mac\"=\"$rmac\" \"lease_time\"=\"3600\" \"router\"=\"$gway\" \"mtu\"=\"$mtu\"")
      else
        did=$($NB_CMD create DHCP_Options cidr=$subn options="\"server_id\"=\"$dhcp\" \"server_mac\"=\"$rmac\" \"lease_time\"=\"3600\" \"router\"=\"$gway\" \"mtu\"=\"$mtu\" \"dns_server\"=\"$dnss\"")
      fi

      $NB_CMD lsp-add $name "dhcpv4id-$name-"$did
      fi
  fi

}

## Remove a switch and the related DHCP

function modify-switch()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  gway=$(echo $* | awk -F"--gateway" '{print$2}' | awk '{print$1}')
  dhcp=$(echo $* | awk -F"--dhcp" '{print$2}' | awk '{print$1}')
  imtu=$(echo $* | awk -F"--mtu" '{print$2}' | awk '{print$1}')
  dnss=$(echo $* | awk -F"--dnsServer" '{print$2}' | awk '{print$1}')
  vlanId=$(echo $* | awk -F"--vlanId" '{print$2}' | awk '{print$1}')
  ipv6=$(echo $* | awk -F"--ipv6" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $name || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name       \tswitch name" >&2
    echo -e "--vlanId     \tvlanId" >&2
    echo -e "--gateway    \toptinal, gateway.  for example, 192.168.1.1"  >&2
    echo -e "--dhcp       \toptinal, dhcp.  for example, 192.168.1.1"  >&2
    echo -e "--mtu        \toptinal, mtu.  for example, 1480"  >&2
    echo -e "--dnsServer  \toptinal, dns server"  >&2
    echo -e "--ipv6       \toptinal, true or false"  >&2
    exit 1
  fi
  
  if [[ $ipv6 == "true" ]]
  then
    dhcpid=$($NB_CMD show $name | grep "dhcpv6id-$name-" | awk -F "dhcpv6id-$name-" '{print$2}') 
  else
    dhcpid=$($NB_CMD show $name | grep "dhcpv4id-$name-" | awk -F "dhcpv4id-$name-" '{print$2}') 
  fi
 
  thisdhcp=$($NB_CMD dhcp-options-get-options $dhcpid | grep "server_id" | awk -F"=" '{print$2}')
  thisgway=$($NB_CMD dhcp-options-get-options $dhcpid | grep "router" | awk -F"=" '{print$2}')
  rmac=$($NB_CMD dhcp-options-get-options $dhcpid | grep "server_mac" | awk -F"=" '{print$2}')
  thismtu=$($NB_CMD dhcp-options-get-options $dhcpid | grep "mtu" | awk -F"=" '{print$2}')
  thisdns=$($NB_CMD dhcp-options-get-options $dhcpid | grep "dns_server" | awk -F"=" '{print$2}')

  if [[ -n $dhcp ]]
  then
    thisdhcp=$dhcp
  fi

  if [[ -n $gway ]]
  then
    thisgway=$gway
  fi

  if [[ -n $imtu ]]
  then
    thismtu=$imtu
  fi

  if [[ -n $dnss  ]]
  then
    thisdns=$dnss
  fi

  cmd="$dhcpid server_mac=$rmac lease_time=3600 mtu=$thismtu"
  if [[ -n $thisdhcp ]]
  then
    cmd=$cmd" server_id=$thisdhcp"
  fi

  if [[ -n $thisgway ]]
  then
    cmd=$cmd" router=$thisgway"
  fi

  if [[ -n $thisdns ]]
  then
    cmd=$cmd" dns_server=$thisdns"
  fi

  $($NB_CMD dhcp-options-set-options $cmd)

  if [[ -n $vlanId ]]
  then
    rport=$name"-router-port"
    sport='to-'$rport'-'$(hostname)'-localnet'
    $NB_CMD set Logical_Switch_Port $sport tag=$vlanId 
  fi

}

function modify-switch6()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  gway=$(echo $* | awk -F"--gateway" '{print$2}' | awk '{print$1}')
  dhcp=$(echo $* | awk -F"--dhcp" '{print$2}' | awk '{print$1}')
  imtu=$(echo $* | awk -F"--mtu" '{print$2}' | awk '{print$1}')
  dnss=$(echo $* | awk -F"--dnsServer" '{print$2}' | awk '{print$1}')
  vlanId=$(echo $* | awk -F"--vlanId" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $name || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name       \tswitch name" >&2
    echo -e "--vlanId     \tvlanId" >&2
    echo -e "--gateway    \toptinal, gateway.  for example, 192.168.1.1"  >&2
    echo -e "--dhcp       \toptinal, dhcp.  for example, 192.168.1.1"  >&2
    echo -e "--mtu        \toptinal, mtu.  for example, 1480"  >&2
    echo -e "--dnsServer  \toptinal, dns server"  >&2
    exit 1
  fi
  
  dhcpid=$($NB_CMD show $name | grep "dhcpv4id-$name-" | awk -F "dhcpv4id-$name-" '{print$2}') 
 
  thisdhcp=$($NB_CMD dhcp-options-get-options $dhcpid | grep "server_id" | awk -F"=" '{print$2}')
  thisgway=$($NB_CMD dhcp-options-get-options $dhcpid | grep "router" | awk -F"=" '{print$2}')
  rmac=$($NB_CMD dhcp-options-get-options $dhcpid | grep "server_mac" | awk -F"=" '{print$2}')
  thismtu=$($NB_CMD dhcp-options-get-options $dhcpid | grep "mtu" | awk -F"=" '{print$2}')
  thisdns=$($NB_CMD dhcp-options-get-options $dhcpid | grep "dns_server" | awk -F"=" '{print$2}')

  if [[ -n $dhcp ]]
  then
    thisdhcp=$dhcp
  fi

  if [[ -n $gway ]]
  then
    thisgway=$gway
  fi

  if [[ -n $imtu ]]
  then
    thismtu=$imtu
  fi

  if [[ -n $dnss  ]]
  then
    thisdns=$dnss
  fi

  cmd="$dhcpid server_mac=$rmac lease_time=3600 mtu=$thismtu"
  if [[ -n $thisdhcp ]]
  then
    cmd=$cmd" server_id=$thisdhcp"
  fi

  if [[ -n $thisgway ]]
  then
    cmd=$cmd" router=$thisgway"
  fi

  if [[ -n $thisdns ]]
  then
    cmd=$cmd" dns_server=$thisdns"
  fi

  $($NB_CMD dhcp-options-set-options $cmd)

  if [[ -n $vlanId ]]
  then
    rport=$name"-router-port"
    sport='to-'$rport'-'$(hostname)'-localnet'
    $NB_CMD set Logical_Switch_Port $sport tag=$vlanId 
  fi

}

# ovs-vsctl remove Open_vSwitch . external_ids ovn-bridge-mappings
# ovs-vsctl remove Open_vSwitch . external_ids ovn-bridge-mappings
function delete-switch()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  bridge=$(echo $* | awk -F"--bridge" '{print$2}' | awk '{print$1}')
  ipv6=$(echo $* | awk -F"--ipv6" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $name || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name    \tswitch name" >&2
    echo -e "--bridge  \tbridge name" >&2
    echo -e "--ipv6    \ttrue of false" >&2
    exit 1
  fi

  ## check
  checkOVSStatus
  
  sid=$($NB_CMD ls-list | grep "($name)" | awk '{print$1}')
  if [[ -z $sid ]]
  then
    echo "cannot connect the master or the switch name does not exist" >&2
    exit 1
  fi

  ## del db
  router=$name"-router"
  if [[ -n $bridge ]]
  then
    ppnn=$($NB_CMD show | grep -A 1 $router"-port" | grep mac | awk -F"\"" '{print$2}')
    ovsn=${ppnn//:/}"-to-"$router"-port-"$(hostname)"-localnet:"$bridge
    full=$(ovs-vsctl list Open_vSwitch | grep external_ids | awk -F"ovn-bridge-mappings=\""  '{print$2}' | awk -F"\"" '{print$1}')

    remain=${full//$ovsn/}
    if [[ -n ${remain:1:2} ]]
    then
      ovs-vsctl set Open_vSwitch . external_ids:ovn-bridge-mappings=${remain:1}
    else
      ovs-vsctl remove Open_vSwitch . external_ids ovn-bridge-mappings
    fi
  fi
  
  ## delete
  if [[ $ipv6 == "true" ]]
  then
    dhcpid=$($NB_CMD show $name | grep "dhcpv6id-$name-" | awk -F"dhcpv6id-$name-" '{print$2}')
  else
    dhcpid=$($NB_CMD show $name | grep "dhcpv4id-$name-" | awk -F"dhcpv4id-$name-" '{print$2}')
  fi
  $NB_CMD ls-del $name  >/dev/null  2>&1 
  $NB_CMD lr-del $router >/dev/null  2>&1
  $NB_CMD dhcp-options-del $dhcpid >/dev/null  2>&1  
 
}

function delete-switch6()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  bridge=$(echo $* | awk -F"--bridge" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $name || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name    \tswitch name" >&2
    echo -e "--bridge  \tbridge name" >&2
    exit 1
  fi

  ## check
  checkOVSStatus
  
  sid=$($NB_CMD ls-list | grep "($name)" | awk '{print$1}')
  if [[ -z $sid ]]
  then
    echo "cannot connect the master or the switch name does not exist" >&2
    exit 1
  fi

  ## del db
  router=$name"-router"
  if [[ -n $bridge ]]
  then
    ppnn=$($NB_CMD show | grep -A 1 $router"-port" | grep mac | awk -F"\"" '{print$2}')
    ovsn=${ppnn//:/}"-to-"$router"-port-"$(hostname)"-localnet:"$bridge
    full=$(ovs-vsctl list Open_vSwitch | grep external_ids | awk -F"ovn-bridge-mappings=\""  '{print$2}' | awk -F"\"" '{print$1}')

    remain=${full//$ovsn/}
    if [[ -n ${remain:1:2} ]]
    then
      ovs-vsctl set Open_vSwitch . external_ids:ovn-bridge-mappings=${remain:1}
    else
      ovs-vsctl remove Open_vSwitch . external_ids ovn-bridge-mappings
    fi
  fi
  
  ## delete
  dhcpid=$($NB_CMD show $name | grep "dhcpv4id-$name-" | awk -F"dhcpv4id-$name-" '{print$2}')
  $NB_CMD ls-del $name  >/dev/null  2>&1 
  $NB_CMD lr-del $router >/dev/null  2>&1
  $NB_CMD dhcp-options-del $dhcpid >/dev/null  2>&1  
 
}

function bind-fip()
{
  switch=$(echo $* | awk -F"--swName" '{print$2}' | awk '{print$1}')
  os=$(echo $* | awk -F"--outSwName" '{print$2}' | awk '{print$1}')
  bridge=$(echo $* | awk -F"--bridge" '{print$2}' | awk '{print$1}')
  vmmac=$(echo $* | awk -F"--vmmac" '{print$2}' | awk '{print$1}')
  fip=$(echo $* | awk -F"--fip" '{print$2}' | awk '{print$1}')
 
  if [[ -z $1 || -z $switch || -z $os || -z $vmmac || -z $fip || -z $(echo $fip | grep "/") || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--swName    \tswitch name" >&2
    echo -e "--outSwName \tout switch name" >&2
    echo -e "--vmmac     \tvm mac" >&2
    echo -e "--fip       \tflating ip and mask, for example, 192.168.1.1/24" >&2
    exit 1
  fi

  checkOVSStatus

  vmip=$($NB_CMD list logical_switch_port  | grep "$vmmac" | awk -F"\"" '{print$2}' | awk '{print$2}')

  router=$switch"-router"
  fport="public-"${vmmac//:/}"-port"
  ip=$(echo $fip | awk -F"/" '{print$1}')
  
  imac=$(printf '00:60:2F:%02X:%02X:%02X\n' $[RANDOM%256] $[RANDOM%256] $[RANDOM%256])
  
  $NB_CMD lrp-add $router $fport  $imac $fip
  
  $NB_CMD lsp-add $os "from-"$fport
  $NB_CMD lsp-set-type "from-"$fport router
  $NB_CMD lsp-set-addresses "from-"$fport $imac
  $NB_CMD lsp-set-options "from-"$fport router-port=$fport

  #$NB_CMD lr-nat-add $router dnat_and_snat $ip $vmip
  $NB_CMD lr-nat-add $router snat $ip $vmip
  $NB_CMD lr-nat-add $router dnat $ip $vmip
  
}

function bind-fip()
{
  switch=$(echo $* | awk -F"--swName" '{print$2}' | awk '{print$1}')
  os=$(echo $* | awk -F"--outSwName" '{print$2}' | awk '{print$1}')
  bridge=$(echo $* | awk -F"--bridge" '{print$2}' | awk '{print$1}')
  vmmac=$(echo $* | awk -F"--vmmac" '{print$2}' | awk '{print$1}')
  fip=$(echo $* | awk -F"--fip" '{print$2}' | awk '{print$1}')
 
  if [[ -z $1 || -z $switch || -z $os || -z $vmmac || -z $fip || -z $(echo $fip | grep "/") || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--swName    \tswitch name" >&2
    echo -e "--outSwName \tout switch name" >&2
    echo -e "--vmmac     \tvm mac" >&2
    echo -e "--fip       \tflating ip and mask, for example, 192.168.1.1/24" >&2
    exit 1
  fi

  checkOVSStatus

  vmip=$($NB_CMD list logical_switch_port  | grep "$vmmac" | awk -F"\"" '{print$2}' | awk '{print$2}')

  router=$switch"-router"
  fport="public-"${vmmac//:/}"-port"
  ip=$(echo $fip | awk -F"/" '{print$1}')
  
  imac=$(printf '00:60:2F:%02X:%02X:%02X\n' $[RANDOM%256] $[RANDOM%256] $[RANDOM%256])
  
  $NB_CMD lrp-add $router $fport  $imac $fip
  
  $NB_CMD lsp-add $os "from-"$fport
  $NB_CMD lsp-set-type "from-"$fport router
  $NB_CMD lsp-set-addresses "from-"$fport $imac
  $NB_CMD lsp-set-options "from-"$fport router-port=$fport

  #$NB_CMD lr-nat-add $router dnat_and_snat $ip $vmip
  $NB_CMD lr-nat-add $router snat $ip $vmip
  $NB_CMD lr-nat-add $router dnat $ip $vmip
  
}

function unbind-fip()
{
  switch=$(echo $* | awk -F"--swName" '{print$2}' | awk '{print$1}')
  vmmac=$(echo $* | awk -F"--vmmac" '{print$2}' | awk '{print$1}')
  fip=$(echo $* | awk -F"--fip" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $switch || -z $vmmac || -z $fip || -n $(echo $fip | grep "/") ||  $2 == "--help" ]]
  then
    cmddesc
    echo -e "--swName  \tswitch name" >&2
    echo -e "--vmmac   \tvm mac" >&2
    echo -e "--fip     \tfip" >&2
    exit 1
  fi

  checkOVSStatus

  router=$switch"-router"
  fport="public-"${vmmac//:/}"-port"
  $NB_CMD lrp-del $fport
  #$NB_CMD lr-nat-del $router dnat_and_snat $fip
  $NB_CMD lr-nat-del $router dnat $fip
  $NB_CMD lr-nat-del $router snat $fip
}

###########################################################
##
##  ACL
##
##########################################################

# [--may-exist] acl-add entity direction priority match verdict
function create-acl()
{
  do=$(echo $* | awk -F"--domain" '{print$2}' | awk '{print$1}')
  sw=$(echo $* | awk -F"--swName" '{print$2}' | awk '{print$1}')
  vm=$(echo $* | awk -F"--vmmac" '{print$2}' | awk '{print$1}')
  tp=$(echo $* | awk -F"--type" '{print$2}' | awk '{print$1}')
  rl=$(echo $* | awk -F"--rule" '{print$2}' | awk -F"--" '{print$1}')
  op=$(echo $* | awk -F"--operator" '{print$2}' | awk '{print$1}')
  pr=$(echo $* | awk -F"--priority" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $sw || -z $vm || -z $tp || -z $rl || -z $op || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--domain     \tdomain" >&2
    echo -e "--swName     \tswitch" >&2
    echo -e "--vmmac      \tmac" >&2
    echo -e "--type       \ttype, from or to"  >&2
    echo -e "--rule       \trule, tcp.dest=1"  >&2
    echo -e "--operator   \tallow or drop"  >&2
    echo -e "--priority   \toptional, 1-1000"  >&2
    exit 1
  fi
  
  ## check 
  sid=$($NB_CMD ls-list | grep "($sw)" | awk '{print$1}')
  if [[ -z $sid ]]
  then
    echo "switch not exist" >&2
    exit 1
  fi
  
  ftport=""
  ioport=""
  if [[ $tp == "from" ]]
  then
    ftport="from-lport"
    ioport="inport"
  elif [[ $tp == "to" ]]
  then
    ftport="to-lport"
    ioport="outport"
  else
    echo "wrong type, must be neither 'from' or 'to'" >&2
    exit 1
  fi
  
  operator=""
  if [[ $op == "allow" ]]
  then
    operator="allow-related"
  elif [[ $op == "drop" ]]
  then
    operator="drop"
  else
    echo "wrong operator, must be neither 'allow' or 'drop'" >&2
    exit 1
  fi
  
  if [[ -z $pr ]]
  then
    pr="100"
  fi
    
  port=$($NB_CMD show | grep -B 1 "$vm" | grep port | awk '{print$2}')
  
  rule=""
  
  if [[ -z $port ]]
  then
    rule=$ioport" == "$rl
  else
    rule=$ioport" == \"$port\" && "$rl
  fi
  
  $NB_CMD acl-add $sw $ftport $pr "$rule" $operator
}

function modify-acl()
{
  delete-acl $*
  create-acl $*
}

# [--type={switch | port-group}] acl-del entity [direction [priority match]]
function delete-acl()
{
  do=$(echo $* | awk -F"--domain" '{print$2}' | awk '{print$1}')
  sw=$(echo $* | awk -F"--swName" '{print$2}' | awk '{print$1}')
  vm=$(echo $* | awk -F"--vmmac" '{print$2}' | awk '{print$1}')
  tp=$(echo $* | awk -F"--type" '{print$2}' | awk '{print$1}')
  rl=$(echo $* | awk -F"--rule" '{print$2}' | awk -F"--" '{print$1}')
  pr=$(echo $* | awk -F"--priority" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $sw || -z $vm || -z $tp || -z $rl || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--domain     \tdomain" >&2
    echo -e "--swName     \tswitch" >&2
    echo -e "--vmmac      \tmac" >&2
    echo -e "--type       \toptional, type, from or to"  >&2
    echo -e "--rule       \toptional, rule, tcp.dest=1"  >&2
    echo -e "--priority   \toptional, 1-1000"  >&2
    exit 1
  fi
  
  ## check 
  sid=$($NB_CMD ls-list | grep "($sw)" | awk '{print$1}')
  if [[ -z $sid ]]
  then
    echo "switch not exist" >&2
    exit 1
  fi
  
  ftport=""
  ioport=""
  if [[ $tp == "from" ]]
  then
    ftport="from-lport"
    ioport="inport"
  elif [[ $tp == "to" ]]
  then
    ftport="to-lport"
    ioport="outport"
  else
    echo "wrong type, must be neither 'from' or 'to'" >&2
    exit 1
  fi
  
  if [[ -z $pr ]]
  then
    pr="100"
  fi
    
  port=$($NB_CMD show | grep -B 1 "$vm" | grep port | awk '{print$2}')
  
  rule=""
  
  if [[ -z $port ]]
  then
    rule=$ioport" == "$rl
  else
    rule=$ioport" == \"$port\" && "$rl
  fi
 
  $NB_CMD acl-del $sw $ftport $pr "$rule"
}

###########################################################
##
##  QoS
##
##########################################################

# [--may-exist] qos-add switch direction priority match [dscp=dscp] [rate=rate [burst=burst]]
function create-qos()
{
  do=$(echo $* | awk -F"--domain" '{print$2}' | awk '{print$1}')
  sw=$(echo $* | awk -F"--swName" '{print$2}' | awk '{print$1}')
  tp=$(echo $* | awk -F"--type" '{print$2}' | awk '{print$1}')
  po=$(echo $* | awk -F"--rule" '{print$2}' | awk -F"--" '{print$1}')
  rt=$(echo $* | awk -F"--rate" '{print$2}' | awk '{print$1}')
  bu=$(echo $* | awk -F"--burst" '{print$2}' | awk '{print$1}')
  pr=$(echo $* | awk -F"--priority" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $sw || -z $tp || -z $po || -z $rt || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--domain     \tdomain" >&2
    echo -e "--seName     \tswitch name" >&2
    echo -e "--type       \ttype, from or to"  >&2
    echo -e "--rule       \tprotocol, IP, tcp"  >&2
    echo -e "--rate       \trate, kbps"  >&2
    echo -e "--burst      \toptional, burst, kbps"  >&2
    echo -e "--priority   \toptional, 1-32767"  >&2
    exit 1
  fi
  
  ## check 
  
  ftport=""
  if [[ $tp == "from" ]]
  then
    ftport="from-lport"
  elif [[ $tp == "to" ]]
  then
    ftport="to-lport"
  else
    echo "wrong type, must be neither 'from' or 'to'" >&2
    exit 1
  fi
  
  if [[ -z $pr ]]
  then
    pr="100"
  fi
      
  if [[ -z $bu ]]
  then  
    $NB_CMD qos-add $sw $ftport $pr "$po" rate=$rt
  else
    $NB_CMD qos-add $sw $ftport $pr "$po" rate=$rt burst=$bu
  fi
  
}

# qos-del switch [direction [priority match]]
function modify-qos()
{
  delete-qos $*
  create-qos $*
}

# qos-del switch [direction [priority match]]
function delete-qos()
{
  do=$(echo $* | awk -F"--domain" '{print$2}' | awk '{print$1}')
  sw=$(echo $* | awk -F"--swName" '{print$2}' | awk '{print$1}')
  tp=$(echo $* | awk -F"--type" '{print$2}' | awk '{print$1}')
  po=$(echo $* | awk -F"--rule" '{print$2}' | awk -F"--" '{print$1}')
  pr=$(echo $* | awk -F"--priority" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $sw || -z $tp || -z $po || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--domain     \tdomain" >&2
    echo -e "--swName     \tswitch name" >&2
    echo -e "--type       \ttype, from or to"  >&2
    echo -e "--rule       \trule, IP, tcp"  >&2
    echo -e "--priority   \toptional, 1-32767"  >&2
    exit 1
  fi
  
  ## check 
  
  ftport=""
  if [[ $tp == "from" ]]
  then
    ftport="from-lport"
  elif [[ $tp == "to" ]]
  then
    ftport="to-lport"
  else
    echo "wrong type, must be neither 'from' or 'to'" >&2
    exit 1
  fi
  
  if [[ -z $pr ]]
  then
    pr="100"
  fi
  
  if [[ -z $bu ]]
  then  
    $NB_CMD qos-del $sw $ftport $pr "$po" rate=$rt
  else
    $NB_CMD qos-del $sw $ftport $pr "$po" rate=$rt burst=$bu
  fi
}



###########################################################
##
##  Address
##
##########################################################

# ovn-nbctl create Address_Set name=www address=10.10.10.11,10.10.10.13,192.168.96.0/21
function create-address()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  addr=$(echo $* | awk -F"--address" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $name || -z $addr || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name       \tname" >&2
    echo -e "--address    \taddress" >&2
    exit 1
  fi
  
  $NB_CMD create Address_Set name=$name address=$addr
}

# qos-del switch [direction [priority match]]
function modify-address()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  addr=$(echo $* | awk -F"--address" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $name || -z $addr || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name       \tname" >&2
    echo -e "--address    \taddress" >&2
    exit 1
  fi
  
  $NB_CMD set Address_Set $name address=$addr
}

# ovn-nbctl create Address_Set name=www address=10.10.10.11,10.10.10.13,192.168.96.0/21
function delete-address()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $name || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name       \tname" >&2
    exit 1
  fi
  
  $NB_CMD destroy Address_Set $name
}


###########################################################
##
##  Simulate VM
##
########################################################## 

function create-vm()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  switch=$(echo $* | awk -F"--switch" '{print$2}' | awk '{print$1}')
  mac=$(echo $* | awk -F"--mac" '{print$2}' | awk '{print$1}')
  ip=$(echo $* | awk -F"--ip" '{print$2}' | awk '{print$1}')
  gway=$(echo $* | awk -F"--gateway" '{print$2}' | awk '{print$1}')
  ipv4=$(echo $* | awk -F"--ipv4" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $name || -z $mac || -z $ip || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name       \tVM name" >&2
    echo -e "--switch     \tSee kubeovn create-switch" >&2
    echo -e "--mac        \tMac"  >&2
    echo -e "--ip         \tIP"  >&2
    echo -e "--gateway    \tOptinal, Gateway"  >&2
    echo -e "--ipv4       \tOptinal, true or false"  >&2
    exit 1
  fi

  delete-vm $*

  if [[ -z $gway ]]
  then
    gway=$(echo $ip | awk -F"." '{print$1"."$2"."$3}')".1"
  fi

  sudo ip netns add $name
  sudo ip link add $name type veth peer name veth-$name
  sudo ip link set veth-$name up
  sudo ip link set $name netns $name
  sudo ip netns exec $name ip link set $name addres $mac
  sudo ip netns exec $name ip link set $name up
  sudo ovs-vsctl add-port br-int veth-$name

  sudo $NB_CMD lsp-add $switch $switch-$name
  sudo $NB_CMD lsp-set-addresses $switch-$name "$mac $ip"
  
  sudo ovs-vsctl set Interface  veth-$name external_ids:iface-id=$switch-$name
  
  if [[ $ipv4 == "fasle" ]]
  then
    sudo ip -6 netns exec $name ip -6 addr add $ip/24 dev $name
    sudo ip -6 netns exec $name ip -6 route add default via $gway
  else
    sudo ip netns exec $name ip addr add $ip/24 dev $name
    sudo ip netns exec $name ip route add default via $gway
  fi
}


function delete-vm()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  switch=$(echo $* | awk -F"--switch" '{print$2}' | awk '{print$1}') 
  ipv4=$(echo $* | awk -F"--ipv4" '{print$2}' | awk '{print$1}')
 
  if [[ -z $1 || -z $name || -z $switch || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name       \tVM name" >&2
    echo -e "--switch     \tswitch" >&2
    echo -e "--ipv4       \tOptinal, true or false"  >&2
    exit 1
  fi

  sudo $NB_CMD lsp-del $switch"-"$name >/dev/null  2>&1 
  sudo ovs-vsctl del-port br-int "veth-"$name >/dev/null  2>&1 
  if [[ $ipv4 == "fasle" ]]
  then
    sudo ip -6 netns del $name >/dev/null  2>&1 
  else
    sudo ip netns del $name >/dev/null  2>&1 
  fi
}

###########################################################
##
##  Info
##
##########################################################

function cmddesc()
{
  echo -e "Welcome to ovn-emulator, you can build your expected network enviroments."
  echo -e "ovn-emulator($VERSION): missing command name (use --help for help)\n"
}

function help()
{
  echo -e "Commands:"
  echo -e "  start-central  :\t(Init): start central node"
  echo -e "  stop-central   :\t(Init): stop  central node"
  echo -e "  start-worker   :\t(Init): start worker  node"
  echo -e "  stop-worker    :\t(Init): stop  worker  node"
  echo -e "  init-network   :\t(Init): create br-ex"
  echo -e "  create-bridge  :\t(L2  ): create L2 bridge"
  echo -e "  delete-bridge  :\t(L2  ): delete L2 bridge"
  echo -e "  setbridge-vlan :\t(L2  ): Set L2 bridge vlan"
  echo -e "  delbridge-vlan :\t(L2  ): Delete L2 bridge vlan"
  echo -e "  just-switch    :\t(L3  ): create L3 switch"
  echo -e "  create-switch  :\t(L3  ): create L3 switch and gateway"
  echo -e "  modify-switch  :\t(L3  ): modify L3 switch and gateway"
  echo -e "  delete-switch  :\t(L3  ): delete L3 switch and gateway"
  echo -e "  bind-fip       :\t(L3  ): bind floating IP"
  echo -e "  unbind-fip     :\t(L3  ): unbind floating IP"
  echo -e "  create-address :\t(L3  ): create Address for ACL"
  echo -e "  modify-address :\t(L3  ): modify Address for ACL"
  echo -e "  delete-address :\t(L3  ): delete Address for ACL"
  echo -e "  create-acl     :\t(ACL ): create access control list for [Virtual] OS enviroments"
  echo -e "  modify-acl     :\t(ACL ): modify access control list for [Virtual] OS enviroments"
  echo -e "  delete-acl     :\t(ACL ): delete access control list for [Virtual] OS enviroments"
  echo -e "  create-qos     :\t(QoS ): create QoS for floating IP"
  echo -e "  modify-qos     :\t(QoS ): modify QoS for floating IP"
  echo -e "  delete-qos     :\t(QoS ): delete QoS for floating IP"
  echo -e "  create-vm      :\t(Simu): create a VM"
  echo -e "  delete-vm      :\t(Simu): delete a VM"
}

case $1 in
  "start-central")
    start-central $*
    ;;
  "stop-central")
    stop-central $*
    ;;
  "start-worker")
    start-worker $*
    ;;
  "stop-worker")
    stop-worker $*
    ;;
  "init-network")
    init-network $*
    ;;
  "create-bridge")
    create-bridge $*
    ;;
  "delete-bridge")
    delete-bridge $*
    ;;
  "setbridge-vlan")
    setbridge-vlan $*
    ;;
  "delbridge-vlan")
    delbridge-vlan $*
    ;;
  "just-switch")
    just-switch $*
    ;;
  "create-switch")
    create-switch $*
    ;;
  "modify-switch")
    modify-switch $*
    ;;
  "delete-switch")
    delete-switch $*
    ;;
  "create-address")
    create-address $*
    ;;
  "modify-address")
    modify-address $*
    ;;
  "delete-address")
    delete-address $*
    ;;
  "bind-fip")
    bind-fip $*
    ;;
  "unbind-fip")
    unbind-fip $*
    ;;
  "create-acl")
    create-acl $*
    ;;
  "modify-acl")
    modify-acl $*
    ;;
  "delete-acl")
    delete-acl $*
    ;;
  "create-qos")
    create-qos $*
    ;;
  "modify-qos")
    modify-acl $*
    ;;
  "delete-qos")
    delete-acl $*
    ;;
  "create-vm")
    create-vm $*
    ;;
  "delete-vm")
    delete-vm $*
    ;;
  *)
  help
  ;;
esac
