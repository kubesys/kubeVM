#! /bin/bash
###############################################
##
##  Copyright (2019, ) Institute of Software
##      Chinese Academy of Sciences
##          wuheng@otcaixiscas.ac.cn
##         wuyuewen@otcaix.iscas.ac.cn
##        liujiexin@otcaix.iscas.ac.cn
##              2019-9-24
##
###############################################

## OVN plugin version

VERSION="1.0.0"
IFCFG="/etc/sysconfig/network-scripts/"

## OVN Tables

TABLE_DNS="DNS"
TABLE_ACL="ACL"
TABLE_SWITCH="Logical_Switch"
TABLE_LOADBALANCER="Load_Balancer"
TABLE_GATEWAY="Gateway_Chassis"
TABLE_ROUTER="Logical_Router"
TABLE_LRSR="Logical_Router_Static_Route"

TABLE_LRP="Logical_Router_Port"
TABLE_LSP="Logical_Switch_Port"
TABLE_PORTGROUP="Port_Group"

TABLE_NBG="NB_Global"
TABLE_METER_BAND="Meter_Band"
TABLE_METWR="Meter"
TABLE_ADDR="Address_Set"
TABLE_QOS="QoS"
TABLE_NAT="NAT"
TABLE_CONN="Connection"
TABLE_SSL="SSL"
TABLE_DHCP="DHCP_Options"

#THISIP=$(kubectl get node vm.$(hostname) -o yaml | grep "THISIP:" | awk -F":" 'NR==1{print$2}' | sed 's/ //g')
THISIP=$(hostname)

## OVN core, please install Kubernetes first

NB_CMD="kubectl ko nbctl"
SB_CMD="kubectl ko sbctl"

###########################################################
##
##  Utils
##
##########################################################

function checkOVSStatus()
{
  res=$(ovs-vsctl show | grep ovs_version | wc -l)
  if [[ $res != 1 ]]
  then
    echo "please start openvswitch first" >&2
    exit 1
  fi
}

function checkNICConfig()
{
  nic=$1
  if [[ ! -f $IFCFG"ifcfg-$nic" ]]
  then
    echo "wrong NIC name" >&2
    exit 1
  fi  
}

function checkDuplicate()
{
  name=$1
  sid=$($NB_CMD ls-list | grep "($name)" | awk '{print$1}')
  if [[ -n $sid ]]
  then
    echo "cannot connect the master or the switch name exists" >&2
    exit 1
  fi
}

function checkDHCP()
{
  dhcpid=$1
  if [[ -z $dhcpid ]]
  then 
    echo -e "invalid switch name"  >&2
	exit 1
  fi
}


###########################################################
##
##  init env
##
##########################################################

function clear()
{
  rm -rf /etc/openvswitch/*db* 2>&1
  rm -rf /etc/openvswitch/.* 2>&1
  rm -rf /etc/openvswitch/system-id.conf 2>&1
}


###########################################################
##
##  L2 bridge
##
##########################################################


function create-bridge()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  nic=$(echo $* | awk -F"--nic" '{print$2}' | awk '{print$1}')
  vlan=$(echo $* | awk -F"--vlan" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $name || -z $nic || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name  \tbridge name" >&2
    echo -e "--nic   \tnic name" >&2
    echo -e "--vlan  \tvlan id, default is \"vlan=0\"" >&2
    exit 1
  fi

  if [[ -z $vlan ]]
  then
    vlan=0
  fi

  ################################
  if [[ ! -f $IFCFG"ifcfg-BRX" ]]
  then
     echo DEVICE=BRX           >> /etc/sysconfig/network-scripts/ifcfg-BRX
     echo DEVICETYPE=ovs       >> /etc/sysconfig/network-scripts/ifcfg-BRX
     echo TYPE=OVSBridge       >> /etc/sysconfig/network-scripts/ifcfg-BRX
     echo ONBOOT=yes           >> /etc/sysconfig/network-scripts/ifcfg-BRX
  fi

  if [[ ! -f $IFCFG"ifcfg-ORG" ]]
  then
     echo TYPE=OVSPort         >> /etc/sysconfig/network-scripts/ifcfg-ORG
     echo DEVICE=ORG           >> /etc/sysconfig/network-scripts/ifcfg-ORG
     echo ONBOOT=yes           >> /etc/sysconfig/network-scripts/ifcfg-ORG
     echo DEVICETYPE=ovs       >> /etc/sysconfig/network-scripts/ifcfg-ORG
     echo OVS_BRIDGE=BRX       >> /etc/sysconfig/network-scripts/ifcfg-ORG
  fi
  ################################
  ################################
  res=$(systemctl status openvswitch | grep Active | awk -F":" '{print $2}' | awk '{print$1}')
  if [[ $res != "active" ]]
  then
    echo "please start openvswitch first" >&2
    exit 1
  fi

  if [[ ! -f $IFCFG"ifcfg-$nic" ]]
  then
    echo "wrong NIC name" >&2
    exit 1
  fi  

  ################################
  ################################
  
  if [[ ! -f $IFCFG"ifcfg-$nic.bak" ]]
  then
    cp $IFCFG"ifcfg-$nic" $IFCFG"ifcfg-$nic.bak"
  fi

  rm -rf $IFCFG"ifcfg-$nic"
  rm -rf $IFCFG"ifcfg-$name"

  mv $IFCFG"ifcfg-ORG" $IFCFG"ifcfg-$nic"
  mv $IFCFG"ifcfg-BRX" $IFCFG"ifcfg-$name"

  ovs-vsctl --if-exist del-br $name
  ovs-vsctl add-br $name
  ovs-vsctl add-br $name"-"$vlan $name $vlan
  ovs-vsctl set interface $name"-"$vlan type=internal
  ovs-vsctl set port $name"-"$vlan fake_bridge=true

  static=$(cat $IFCFG"ifcfg-$nic.bak" | grep BOOTPROTO | grep static)
  ip=$(cat $IFCFG"ifcfg-$nic.bak" | grep IPADDR)
  mask=$(cat $IFCFG"ifcfg-$nic.bak" | grep NETMASK)
  prefix=$(cat $IFCFG"ifcfg-$nic.bak" |  grep PREFIX)
  gw=$(cat $IFCFG"ifcfg-$nic.bak" | grep GATEWAY)
  dns=$(cat $IFCFG"ifcfg-$nic.bak" | grep DNS)
  
  sed -i "s/BRX/$name/g" $IFCFG"ifcfg-$name"
  sed -i "s/BRX/$name/g" $IFCFG"ifcfg-$nic"
  sed -i "s/ORG/$nic/g" $IFCFG"ifcfg-$nic"
  if [[ -z $static ]]
  then
    echo "BOOTPROTO=dhcp" >> $IFCFG"ifcfg-$name"
  else
    echo "$ip" >> $IFCFG"ifcfg-$name"
    echo "$mask" >> $IFCFG"ifcfg-$name"
    echo "$prefix" >> $IFCFG"ifcfg-$name"
    echo "$gw" >> $IFCFG"ifcfg-$name"
    echo "$dns" >> $IFCFG"ifcfg-$name"
  fi

  ovs-vsctl add-port $name $nic && ifdown $nic && ifup $nic && ifup $name
  ip link set dev $nic promisc on
  ip link set dev $name promisc on
}

function delete-bridge()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  nic=$(echo $* | awk -F"--nic" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $nic || -z $nic || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name  \tbridge name" >&2
    echo -e "--nic   \tnic name" >&2
    exit 1
  fi

  ################################
  res=$(systemctl status openvswitch | grep Active | awk -F":" '{print $2}' | awk '{print$1}')
  if [[ $res != "active" ]]
  then
    echo "please start openvswitch first" >&2
    exit 1
  fi

  if [[ ! -f $IFCFG"ifcfg-$nic" ]]
  then
    echo "wrong NIC name" >&2
    exit 1
  fi

  ################################

  rm -rf $IFCFG"ifcfg-$name"

  if [[ ! -f $IFCFG"ifcfg-$nic.bak" ]]
  then
    echo "$nic is not a part of openvswitch" >&2
    exit 1
  fi 
  rm -rf $IFCFG"ifcfg-$nic"

 
  mv -f $IFCFG"ifcfg-$nic.bak" $IFCFG"ifcfg-$nic"

  ovs-vsctl --if-exist del-br $name && ifdown $nic && ifup $nic

}

# Set vlan id for port

function setbridge-vlan()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  vlan=$(echo $* | awk -F"--vlan" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $name || -z $vlan || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name     \tbridge name" >&2
    echo -e "--vlan     \tvlan id" >&2
    exit 1
  fi


  ovs-vsctl add-br $name"-"$vlan $name $vlan
  ovs-vsctl set interface $name"-"$vlan type=internal  
  ovs-vsctl set port $name"-"$vlan fake_bridge=true
}

# Delete port's vlan id

function delbridge-vlan()
{

  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  vlan=$(echo $* | awk -F"--vlan" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $name || -z $vlan || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name    \tbridge name" >&2
    echo -e "--vlan    \tvlan" >&2
    exit 1
  fi

  res=$(ovs-vsctl br-to-parent $name"-"$vlan)

  if [[ $res != $name ]]
  then
    echo "wrong vlan id in bridge $name" >&2
    exit 1
  fi

  ovs-vsctl set port $name"-"$vlan fake_bridge=false

  ovs-vsctl --if-exist del-port $name"-"$vlan
}


###########################################################
##
##  l3 switch
##
###########################################################


## Create a switch with a default DHCP using kube-ovn

## Bind a switch port

function bind-swport()
{
  mac=$(echo $* | awk -F"--mac" '{print$2}' | awk '{print$1}')
  switch=$(echo $* | awk -F"--switch" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $mac || -z $switch || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--switch    \tswitch name" >&2
    echo -e "--mac       \tvirtual NIC mac" >&2
    echo -e "--ip        \tvirtual NIC IP (optional)" >&2
    exit 1
  fi

  name=$(ovs-vsctl list interface | grep -A 14 "$mac" | grep -m 1 name | awk -F": " '{print$2}' | sed s/\"//g)
  ip=$(echo $* | awk -F"--ip" '{print$2}' | awk '{print$1}')

  if [[ -z $ip ]]
  then
    ip='dynamic'
  fi

  sid=$($NB_CMD ls-list | grep "($switch)" |awk '{print$1}')
  if [[ -z $sid ]]
  then
    echo "cannot connect the master or the switch name does not exist" >&2
    exit 1
  fi

  nic=$(ovs-vsctl show | grep $name)
  if [[ -z $nic ]]
  then
    echo "NIC does not exist" >&2
    exit 1
  fi

  iface=$(ovs-vsctl get interface $name external_ids:iface-id | sed s/\"//g)
  ifmac=$(ovs-vsctl get interface $name external_ids:attached-mac | sed s/\"//g)
  
  dhcpid=$($NB_CMD list DHCP_Options | grep -B 4 "ref=$switch," | grep _uuid | awk -F":" '{print$2}' | sed 's/ //g')
  #dhcpid=$($NB_CMD show | grep "$switch-" | awk -F"$switch-" '{print$2}')
  $NB_CMD --if-exists lsp-del $iface
  $NB_CMD lsp-add $switch $iface
  $NB_CMD lsp-set-addresses $iface "$ifmac $ip"
  $NB_CMD lsp-set-dhcpv4-options $iface $dhcpid
  ovs-vsctl set interface $name external_ids:iface-id=$iface
}

## Unbind a switch port

function unbind-swport()
{
  mac=$(echo $* | awk -F"--mac" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $mac || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--mac      \tvirtual NIC mac" >&2
    exit 1
  fi

  iface=$($NB_CMD show | grep -B 1 "$mac"  | grep port | awk 'NR==1{print$2}')
  if [[ -z $iface ]]
  then
    echo "mac does not exist" >&2
    exit 1
  fi
  $NB_CMD --if-exists lsp-del $iface
}

# Set vxlan id for port

function setport-vxlan()
{
  mac=$(echo $* | awk -F"--mac" '{print$2}' | awk '{print$1}')
  vlan=$(echo $* | awk -F"--vxlan" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $mac || -z $vxlan || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--mac      \tvirtual NIC mac" >&2
    echo -e "--vxlan      \tvlan id" >&2
    exit 1
  fi

  name=$(ovs-vsctl list interface | grep -A 14 "$mac" | grep name | awk -F"\"" '{print$2}')
  
  if [[ -z $name ]]
  then
    echo "NIC not exist." >&2
    exit 1
  fi

  ovs-vsctl set port $name tag=$vxlan
}

# Delete port's vxlan id

function delport-vxlan()
{
  mac=$(echo $* | awk -F"--mac" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $mac || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--mac      \tvirtual NIC mac" >&2
    exit 1
  fi

  name=$(ovs-vsctl list interface | grep -A 14 "$mac" | grep name | awk -F"\"" '{print$2}')

  if [[ -z $name ]]
  then
    echo "NIC not exist." >&2
    exit 1
  fi

  vxlan=$(ovs-vsctl get port $name tag)

  if echo $vxlan | grep -q '[^0-9]'
  then
    exit 0
  fi
  
  ovs-vsctl remove port $name tag $vxlan
  ovs-vsctl set interface $name type=internal
}

function create-fip()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  ip=$(echo $* | awk -F"--ip" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $name || -z $ip || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name      \tPhysical NIC name" >&2
    echo -e "--ip        \tFloating IP" >&2
    exit 1
  fi

  ne=$(ip a | grep $name)
  if [[ -z $ne ]]
  then
    echo "Physical NIC not exist" >&2
    exit 1
  fi

  ie=$(ip a | grep $ip)
  if [[ -n $ie ]]
  then
    echo "IP exist" >&2
    exit 1
  fi 

  for i in `seq 1 1000`
  do
    fname=$name":"$i
    if [[ -f /etc/sysconfig/network-scripts/ifcfg-$fname ]]
    then
      continue
    fi
    mask=$(ip a | grep -A 1 $name | grep inet | awk 'NR==1' |awk '{print$2}' | awk -F"/" '{print$2}')
    rm -rf /etc/sysconfig/network-scripts/ifcfg-$fname
    echo "DEVICE=$fname" >> /etc/sysconfig/network-scripts/ifcfg-$fname
    echo "BOOTPROTO=static" >> /etc/sysconfig/network-scripts/ifcfg-$fname
    echo "ONBOOT=yes" >> /etc/sysconfig/network-scripts/ifcfg-$fname
    echo "NM_CONTROLLED=no" >> /etc/sysconfig/network-scripts/ifcfg-$fname
    echo "IPADDR=$ip" >> /etc/sysconfig/network-scripts/ifcfg-$fname
    echo "PREFIX=$mask" >> /etc/sysconfig/network-scripts/ifcfg-$fname
    ifup $fname
    exit 0
  done

  echo "too much floating IPs" >&2
  exit 1   

}


function delete-fip()
{
  ip=$(echo $* | awk -F"--ip" '{print$2}' | awk '{print$1}')
  fname=$(ip a | grep $ip | awk '{print$NF}')

  if [[ -z $1 || -z $ip || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--ip        \tFloating IP" >&2
    exit 1
  fi

  if [[ -z $fname ]]
  then
    echo "wrong IP, cannot find a NIC with the IP" >&2
    exit 1
  fi

  ifconfig $fname down
  rm -rf /etc/sysconfig/network-scripts/ifcfg-$fname
}

function bind-fip()
{
  switch=$(echo $* | awk -F"--swName" '{print$2}' | awk '{print$1}')
  os=$(echo $* | awk -F"--outSwName" '{print$2}' | awk '{print$1}')
  bridge=$(echo $* | awk -F"--bridge" '{print$2}' | awk '{print$1}')
  vmmac=$(echo $* | awk -F"--vmmac" '{print$2}' | awk '{print$1}')
  fip=$(echo $* | awk -F"--fip" '{print$2}' | awk '{print$1}')
 
  if [[ -z $1 || -z $switch || -z $os || -z $vmmac || -z $fip || -z $(echo $fip | grep "/") || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--swName    \tswitch name" >&2
    echo -e "--outSwName \tout switch name" >&2
    echo -e "--vmmac     \tvm mac" >&2
    echo -e "--fip       \tflating ip and mask, for example, 192.168.1.1/24" >&2
    exit 1
  fi

  #checkOVSStatus

  vmip=$($NB_CMD list logical_switch_port  | grep "$vmmac" | awk -F"\"" '{print$2}' | awk '{print$2}')

  router=$switch"-router"
  fport="public-"${vmmac//:/}"-port"
  ip=$(echo $fip | awk -F"/" '{print$1}')
  #rmk=$(echo $fip | awk -F"/" '{print$2}')
  #pip=$(echo $ip | awk -F"." '{print$1"."$2"."$3}')".250"
  imac=$(printf '00:60:2F:%02X:%02X:%02X\n' $[RANDOM%256] $[RANDOM%256] $[RANDOM%256])
  
  $NB_CMD lrp-add $router $fport $imac $fip

  pswn="public-"${vmmac//:/}"-"$(hostname)
  
  $NB_CMD lsp-add $os "from-"$fport
  $NB_CMD lsp-set-type "from-"$fport router
  $NB_CMD lsp-set-addresses "from-"$fport $imac
  $NB_CMD lsp-set-options "from-"$fport router-port=$fport
  
  $NB_CMD lr-nat-add $router dnat $ip $vmip
  $NB_CMD lr-nat-add $router snat $ip $vmip
  
}

function unbind-fip()
{
  switch=$(echo $* | awk -F"--swName" '{print$2}' | awk '{print$1}')
  vmmac=$(echo $* | awk -F"--vmmac" '{print$2}' | awk '{print$1}')
  fip=$(echo $* | awk -F"--fip" '{print$2}' | awk '{print$1}')
  vmip=$(echo $* | awk -F"--vmip" '{print$2}' | awk '{print$1}')

  if [[ -z $1 || -z $switch || -z $vmmac || -z $fip || -n $(echo $fip | grep "/") ||  $2 == "--help" ]]
  then
    cmddesc
    echo -e "--swName  \tswitch name" >&2
    echo -e "--vmmac   \tvm mac" >&2
    echo -e "--fip     \tfip" >&2
    echo -e "--vmip    \tvmip" >&2
    exit 1
  fi

  #checkOVSStatus

  router=$switch"-router"
  port1="public-"${vmmac//:/}"-port"
  port2="from-public-"${vmmac//:/}"-port"
  $NB_CMD lrp-del $port1
  $NB_CMD lsp-del $port2
  $NB_CMD lr-nat-del $router dnat $fip
  $NB_CMD lr-nat-del $router snat $vmip
}

###########################################################
##
##  ACL
##
##########################################################

# [--may-exist] acl-add entity direction priority match verdict
function create-acl()
{
  do=$(echo $* | awk -F"--domain" '{print$2}' | awk '{print$1}')
  sw=$(echo $* | awk -F"--swName" '{print$2}' | awk '{print$1}')
  vm=$(echo $* | awk -F"--vmmac" '{print$2}' | awk '{print$1}')
  tp=$(echo $* | awk -F"--type" '{print$2}' | awk '{print$1}')
  rl=$(echo $* | awk -F"--rule" '{print$2}' | awk -F"--" '{print$1}')
  op=$(echo $* | awk -F"--operator" '{print$2}' | awk '{print$1}')
  pr=$(echo $* | awk -F"--priority" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $sw || -z $vm || -z $tp || -z $rl || -z $op || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--domain     \tdomain" >&2
    echo -e "--swName     \tswitch" >&2
    echo -e "--vmmac      \tmac" >&2
    echo -e "--type       \ttype, from or to"  >&2
    echo -e "--rule       \trule, tcp.dest=1"  >&2
    echo -e "--operator   \tallow or drop"  >&2
    echo -e "--priority   \toptional, 1-1000"  >&2
    exit 1
  fi
  
  ## check 
  sid=$($NB_CMD ls-list | grep "($sw)" | awk '{print$1}')
  if [[ -z $sid ]]
  then
    echo "switch "$sw" not exist" >&2
    exit 1
  fi
  
  smac=$($NB_CMD show $sw | grep $vm)
  
  if [[ -z $smac ]]
  then
    echo "vmmac "$vm" not exist" >&2
    exit 1
  fi
  
  ftport=""
  ioport=""
  if [[ $tp == "from" ]]
  then
    ftport="from-lport"
    ioport="inport"
  elif [[ $tp == "to" ]]
  then
    ftport="to-lport"
    ioport="outport"
  else
    echo "wrong type, must be neither 'from' or 'to'" >&2
    exit 1
  fi
  
  operator=""
  if [[ $op == "allow" ]]
  then
    operator="allow-related"
  elif [[ $op == "drop" ]]
  then
    operator="drop"
  else
    echo "wrong operator, must be neither 'allow' or 'drop'" >&2
    exit 1
  fi
  
  if [[ -z $pr ]]
  then
    pr="100"
  fi
    
  port=$($NB_CMD show | grep -B 1 "$vm" | grep port | awk '{print$2}')
  
  rule=""
  
  if [[ -z $port ]]
  then
    rule=$ioport" == "$rl
  else
    rule=$ioport" == \"$port\" && "$rl
  fi
  
  $NB_CMD acl-add $sw $ftport $pr "$rule" $operator
}

function modify-acl()
{
  delete-acl $*
  create-acl $*
}

# [--type={switch | port-group}] acl-del entity [direction [priority match]]
function delete-acl()
{
  do=$(echo $* | awk -F"--domain" '{print$2}' | awk '{print$1}')
  sw=$(echo $* | awk -F"--swName" '{print$2}' | awk '{print$1}')
  vm=$(echo $* | awk -F"--vmmac" '{print$2}' | awk '{print$1}')
  tp=$(echo $* | awk -F"--type" '{print$2}' | awk '{print$1}')
  rl=$(echo $* | awk -F"--rule" '{print$2}' | awk -F"--" '{print$1}')
  pr=$(echo $* | awk -F"--priority" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $sw || -z $vm || -z $tp || -z $rl || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--domain     \tdomain" >&2
    echo -e "--swName     \tswitch" >&2
    echo -e "--vmmac      \tmac" >&2
    echo -e "--type       \toptional, type, from or to"  >&2
    echo -e "--rule       \toptional, rule, tcp.dest=1"  >&2
    echo -e "--priority   \toptional, 1-1000"  >&2
    exit 1
  fi
  
  ## check 
  sid=$($NB_CMD ls-list | grep "($sw)" | awk '{print$1}')
  if [[ -z $sid ]]
  then
    echo "switch not exist" >&2
    exit 1
  fi
  
  ftport=""
  ioport=""
  if [[ $tp == "from" ]]
  then
    ftport="from-lport"
    ioport="inport"
  elif [[ $tp == "to" ]]
  then
    ftport="to-lport"
    ioport="outport"
  else
    echo "wrong type, must be neither 'from' or 'to'" >&2
    exit 1
  fi
  
  if [[ -z $pr ]]
  then
    pr="100"
  fi
    
  port=$($NB_CMD show | grep -B 1 "$vm" | grep port | awk '{print$2}')
  
  rule=""
  
  if [[ -z $port ]]
  then
    rule=$ioport" == "$rl
  else
    rule=$ioport" == \"$port\" && "$rl
  fi
 
  $NB_CMD acl-del $sw $ftport $pr "$rule"
}

###########################################################
##
##  QoS
##
##########################################################

# [--may-exist] qos-add switch direction priority match [dscp=dscp] [rate=rate [burst=burst]]
function create-qos()
{
  do=$(echo $* | awk -F"--domain" '{print$2}' | awk '{print$1}')
  sw=$(echo $* | awk -F"--swName" '{print$2}' | awk '{print$1}')
  tp=$(echo $* | awk -F"--type" '{print$2}' | awk '{print$1}')
  po=$(echo $* | awk -F"--rule" '{print$2}' | awk -F"--" '{print$1}')
  rt=$(echo $* | awk -F"--rate" '{print$2}' | awk '{print$1}')
  bu=$(echo $* | awk -F"--burst" '{print$2}' | awk '{print$1}')
  pr=$(echo $* | awk -F"--priority" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $sw || -z $tp || -z $po || -z $rt || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--domain     \tdomain" >&2
    echo -e "--seName     \tswitch name" >&2
    echo -e "--type       \ttype, from or to"  >&2
    echo -e "--rule       \trule, IP, tcp"  >&2
    echo -e "--rate       \trate, kbps"  >&2
    echo -e "--burst      \toptional, burst, kbps"  >&2
    echo -e "--priority   \toptional, 1-32767"  >&2
    exit 1
  fi
  
  ## check 
  
  ftport=""
  if [[ $tp == "from" ]]
  then
    ftport="from-lport"
  elif [[ $tp == "to" ]]
  then
    ftport="to-lport"
  else
    echo "wrong type, must be neither 'from' or 'to'" >&2
    exit 1
  fi
  
  if [[ -z $pr ]]
  then
    pr="100"
  fi
      
  if [[ -z $bu ]]
  then  
    $NB_CMD qos-add $sw $ftport $pr "$po" rate=$rt
  else
    $NB_CMD qos-add $sw $ftport $pr "$po" rate=$rt burst=$bu
  fi
  
}

# qos-del switch [direction [priority match]]
function modify-qos()
{
  delete-qos $*
  create-qos $*
}

# qos-del switch [direction [priority match]]
function delete-qos()
{
  do=$(echo $* | awk -F"--domain" '{print$2}' | awk '{print$1}')
  sw=$(echo $* | awk -F"--swName" '{print$2}' | awk '{print$1}')
  tp=$(echo $* | awk -F"--type" '{print$2}' | awk '{print$1}')
  po=$(echo $* | awk -F"--rule" '{print$2}' | awk -F"--" '{print$1}')
  pr=$(echo $* | awk -F"--priority" '{print$2}' | awk '{print$1}')
  rt=$(echo $* | awk -F"--rate" '{print$2}' | awk '{print$1}')
  bu=$(echo $* | awk -F"--burst" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $sw || -z $tp || -z $po || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--domain     \tdomain" >&2
    echo -e "--swName     \tswitch name" >&2
    echo -e "--type       \ttype, from or to"  >&2
    echo -e "--rule       \trule, IP, tcp"  >&2
    echo -e "--priority   \toptional, 1-32767"  >&2
    echo -e "--rate       \trate, kbps"  >&2
    echo -e "--burst      \toptional, burst, kbps"  >&2
    exit 1
  fi
  
  ## check 
  
  ftport=""
  if [[ $tp == "from" ]]
  then
    ftport="from-lport"
  elif [[ $tp == "to" ]]
  then
    ftport="to-lport"
  else
    echo "wrong type, must be neither 'from' or 'to'" >&2
    exit 1
  fi
  
  if [[ -z $pr ]]
  then
    pr="100"
  fi
  
  $NB_CMD qos-del $sw $ftport $pr "$po"
  #if [[ -z $bu ]]
  #then  
  #  $NB_CMD qos-del $sw $ftport $pr "$po" rate=$rt
  #else
  #  $NB_CMD qos-del $sw $ftport $pr "$po" rate=$rt burst=$bu
  #fi
}

###########################################################
##
##  Address
##
##########################################################

# ovn-nbctl create Address_Set name=www address=10.10.10.11,10.10.10.13,192.168.96.0/21
function create-address()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  addr=$(echo $* | awk -F"--address" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $name || -z $addr || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name       \tname" >&2
    echo -e "--address    \taddress" >&2
    exit 1
  fi
  
  $NB_CMD create Address_Set name=$name address=$addr
}

# qos-del switch [direction [priority match]]
function modify-address()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  addr=$(echo $* | awk -F"--address" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $name || -z $addr || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name       \tname" >&2
    echo -e "--address    \taddress" >&2
    exit 1
  fi
  
  $NB_CMD set Address_Set $name address=$addr
}

# ovn-nbctl create Address_Set name=www address=10.10.10.11,10.10.10.13,192.168.96.0/21
function delete-address()
{
  name=$(echo $* | awk -F"--name" '{print$2}' | awk '{print$1}')
  
  if [[ -z $1 || -z $name || $2 == "--help" ]]
  then
    cmddesc
    echo -e "--name       \tname" >&2
    exit 1
  fi
  
  $NB_CMD destroy Address_Set $name
}

###########################################################
##
##  help
##
##########################################################

function cmddesc()
{
  echo -e "Welcome to ovnctl, the ovn plugin for Kubernetes."
  echo -e "ovnctl($VERSION): missing command name (use --help for help)\n"
}


function help()
{
  cmddesc
  echo -e "Commands:"
  echo -e "  create-address :\t(L3  ): create Address for ACL"
  echo -e "  modify-address :\t(L3  ): modify Address for ACL"
  echo -e "  delete-address :\t(L3  ): delete Address for ACL"
  echo -e "  bind-fip       :\t(L3  ): bind floating IP"
  echo -e "  unbind-fip     :\t(L3  ): Unbind floating IP"
  echo -e "  bind-swport    :\t(L3  ): Bind a L3's port to OVN"
  echo -e "  unbind-swport  :\t(L3  ): Unbind a L3's port from OVN"
  echo -e "  create-qos     :\t(QoS ): create QoS for floating IP"
  echo -e "  modify-qos     :\t(QoS ): modify QoS for floating IP"
  echo -e "  delete-qos     :\t(QoS ): delete QoS for floating IP"
  echo -e "  create-acl     :\t(ACL ): create access control list"
  echo -e "  modify-acl     :\t(ACL ): modify access control list"
  echo -e "  delete-acl     :\t(ACL ): delete access control list"
}


case $1 in
  "bind-swport")
    bind-swport $*
    ;;
  "unbind-swport")
    unbind-swport $*
    ;;
  "create-address")
    create-address $*
    ;;
  "modify-address")
    modify-address $*
    ;;
  "delete-address")
    delete-address $*
    ;;
  "bind-fip")
    bind-fip $*
    ;;
  "unbind-fip")
    unbind-fip $*
    ;;
  "create-acl")
    create-acl $*
    ;;
  "modify-acl")
    modify-acl $*
    ;;
  "delete-acl")
    delete-acl $*
    ;;
  "create-qos")
    create-qos $*
    ;;
  "modify-qos")
    modify-qos $*
    ;;
  "delete-qos")
    delete-qos $*
    ;;
  "--help")
    help
    ;;
  *)
  help
  ;;
esac
